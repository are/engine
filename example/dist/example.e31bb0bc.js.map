{"version":3,"sources":["../src/asset_loader/AssetDefinition.ts","../src/asset_loader/Asset.ts","../src/asset_loader/ImageAsset.ts","../src/asset_loader/AssetLoader.ts","index.js"],"names":["assetDef","AssetDefinition","AssetType","image","loader","AssetLoader","main"],"mappings":";;AIAA;;AACA;;;ADAA,ADDA;;AFAA,AGGA,ADFA,IDCsB,ADFV,QCKV,CDLF,cCKqB,UAAnB,EAA8C;AAAA,AGFhD,IAAMA,QAAQ,GAAG,IAAIC,gCAAJ,CAAoBC,2BAAUC,KAA9B,EAAqC,cAArC,CAAjB;AAEA,IAAMC,MAAM,GAAG,IAAIC,wBAAJ,EAAf;AHAqB,ADLrB,CAAA,MCKqB,IDLT,MCKS,GAAA,ADLrB,EAAqB,QCKA;AAA+B,ADJlD,EAAA,OIMaC,EJNb,CAAA,SAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA;AACD,CAFD,EAAY,SAAS,yBAAT,SAAS,GAAA,EAAA,CAArB;;IAIa,kBACX,yBAAmB,IAAnB,EAA2C,MAA3C,EAAyD;AAAA;kEIE3D;AJFqB,AIErB,OJFqB,IAAA,GAAA,IAAA;AAAwB,AIE7C,OJF6C,MAAA,GAAA,MAAA;AAAkB,AIE/D,IDFa;AAAb,ACEA,yBDFA;AAAA,ACEA;AAAA;ADDU,ACCV,SDDU,KAAA,GAA4C,IAAI,GAAJ,EAA5C;AA0CT,ACzCD;AAAA;AAAA;IFJa;;gGCKK;;;ADFhB,sBAAY,UAAZ,EAAgD,KAAhD,EAAuE;AAAA;;AAAA;ACGjE,gBAAA,QAAsB;AAEpB,ADJN,gBCIM,WAAQ,CAAA,EAAA,ADJR,GCIW,KAAK,EDJtB,GCIiB,CAAW,GAAX,CAAe,eAAe,CAAC,MAA/B,CAAH,MAAyC,IAAzC,IAAyC,EAAA,KAAA,KAAA,CAAzC,GAAyC,EAAzC,GAA6C,IAAI,GAAJ;ADLb,UAAA,KAAA,GAAA,KAAA;ACO9C,ADTF,UAAA,IAAA,GAAO,GCSD,QAAQ,CAAC,GAAT,CAAa,WDTF,ICSiB,CAAC,ADTnC,ICSM,CAAJ,EAAwC;AACtC,ADRmE,kBCQnE,KAAK,GAAG,QAAQ,CAAC,GAAT,CAAa,eAAe,CAAC,IAA7B,CAAR;AACD,ADPF;;sBCSK,KAAK,KAAK;EDdc;;;;iDCenB;;;8BAGD,KAAK,CAAC;gDACP,2BAAU;;;;;uBACC,KAAK,cAAL,CAAoB,eAApB;;;AAAd,gBAAA;;;AAGJ,gBAAA,QAAQ,CAAC,GAAT,CAAa,eAAe,CAAC,IAA7B,EAAmC,KAAnC;AACA,qBAAK,KAAL,CAAW,GAAX,CAAe,eAAe,CAAC,MAA/B,EAAuC,QAAvC;iDAEO;;;;;;;;;;;;;;;;;;mCAGM,iBAAgC;AAC7C,UAAM,YAAY,GAAG,IAAI,KAAJ,EAArB;AAEA,aAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAoB;AACrC,QAAA,YAAY,CAAC,gBAAb,CAA8B,OAA9B,EAAuC,MAAvC,EAA+C;AAAE,UAAA,IAAI,EAAE;AAAR,SAA/C;AACA,QAAA,YAAY,CAAC,gBAAb,CACE,MADF,EAEE,YAAK;AACH,UAAA,OAAO,CAAC,IAAI,sBAAJ,CAAe,eAAf,EAAgC,YAAhC,CAAD,CAAP;AACD,SAJH,EAKE;AAAE,UAAA,IAAI,EAAE;AAAR,SALF;AAQA,QAAA,YAAY,CAAC,GAAb,GAAmB,eAAe,CAAC,MAAnC;AACD,OAXM,CAAP;AAYD","file":"example.e31bb0bc.js","sourceRoot":"..","sourcesContent":["export enum AssetType {\n  image,\n}\n\nexport class AssetDefinition {\n  constructor(public type: AssetType, public source: string) {}\n}\n","import { AssetDefinition, AssetType } from './AssetDefinition'\n\nexport abstract class Asset {\n  type: AssetType\n\n  constructor(public definition: AssetDefinition) {}\n}\n","import { Asset } from './Asset'\nimport { AssetDefinition, AssetType } from './AssetDefinition'\n\nexport class ImageAsset extends Asset {\n  type = AssetType.image\n\n  constructor(definition: AssetDefinition, public image: HTMLImageElement) {\n    super(definition)\n  }\n}\n","import { Asset } from './Asset'\nimport { AssetDefinition, AssetType } from './AssetDefinition'\n\nimport { ImageAsset } from './ImageAsset'\n\nexport class AssetLoader {\n  private cache: Map<string, Map<AssetType, Asset>> = new Map()\n\n  async loadAsset(assetDefinition: AssetDefinition): Promise<Asset> {\n    let asset: Asset | null = null\n\n    const assetMap = this.cache.get(assetDefinition.source) ?? new Map()\n\n    if (assetMap.has(assetDefinition.type)) {\n      asset = assetMap.get(assetDefinition.type)\n    }\n\n    if (asset !== null) {\n      return asset\n    }\n\n    switch (asset.type) {\n      case AssetType.image:\n        asset = await this.loadImageAsset(assetDefinition)\n    }\n\n    assetMap.set(assetDefinition.type, asset)\n    this.cache.set(assetDefinition.source, assetMap)\n\n    return asset\n  }\n\n  loadImageAsset(assetDefinition: AssetDefinition): Promise<ImageAsset> {\n    const imageElement = new Image()\n\n    return new Promise((resolve, reject) => {\n      imageElement.addEventListener('error', reject, { once: true })\n      imageElement.addEventListener(\n        'load',\n        () => {\n          resolve(new ImageAsset(assetDefinition, imageElement))\n        },\n        { once: true }\n      )\n\n      imageElement.src = assetDefinition.source\n    })\n  }\n}\n","import { AssetDefinition, AssetType } from '../src/asset_loader/AssetDefinition'\nimport { AssetLoader } from '../src/asset_loader/AssetLoader'\n\nconst assetDef = new AssetDefinition(AssetType.image, '/favicon.ico')\n\nconst loader = new AssetLoader()\n\nasync function main() {}\n"]}